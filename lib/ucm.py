# AUTOGENERATED! DO NOT EDIT! File to edit: ../blog/posts/multilabel2/multilabel2.ipynb.

# %% auto 0
__all__ = ['p', 'powerset', 'seq_diff', 'join_a_foo_and_a_bar', 'confirm_delete', 'sh', 'setup_logging', 'export']

# %% ../blog/posts/multilabel2/multilabel2.ipynb 5
import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '1'

# %% ../blog/posts/multilabel2/multilabel2.ipynb 7
from fastcore.foundation import L
from pathlib import Path
from fastcore.xtras import Path

# %% ../blog/posts/multilabel2/multilabel2.ipynb 9
from itertools import chain, combinations

def powerset(iterable):
    "powerset([1,2,3]) --> () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)"
    s = list(iterable)
    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))

# %% ../blog/posts/multilabel2/multilabel2.ipynb 10
def seq_diff(s1, s2):
    return L(filter(lambda x: x not in s2, s1))

# %% ../blog/posts/multilabel2/multilabel2.ipynb 13
import inflect

p = inflect.engine()

# %% ../blog/posts/multilabel2/multilabel2.ipynb 14
def join_a_foo_and_a_bar(comb):
    return " and ".join(p.a(x) for x in comb)

# %% ../blog/posts/multilabel2/multilabel2.ipynb 17
import ipywidgets as widgets
from send2trash import send2trash

def confirm_delete(del_path):
    button = widgets.Button(description=f"Move data to trash: {del_path}?", layout=widgets.Layout(width='20em'))
    # button.on_click(lambda b: shutil.rmtree(del_path, ignore_errors=True))
    button.on_click(lambda b: send2trash(del_path))
    display(button)

# %% ../blog/posts/multilabel2/multilabel2.ipynb 21
import subprocess

def sh(command):
    return subprocess.check_output(command).decode('utf-8').rstrip('\n')

# %% ../blog/posts/multilabel2/multilabel2.ipynb 24
import logging

def setup_logging(quiet=False, debug=False):
    if debug:
        logging.basicConfig(level=logging.DEBUG, format="%(asctime)s %(levelname)s %(message)s")
    elif quiet:
        logging.basicConfig(level=logging.ERROR, format="%(message)s")
    else:
        logging.basicConfig(level=logging.INFO, format="%(message)s")

# %% ../blog/posts/multilabel2/multilabel2.ipynb 26
from nbdev.export import nb_export
import ipynbname

def export(nb_file=None, lib_dir=None):
    if nb_file is None: nb_file = ipynbname.name() + '.ipynb'
    if lib_dir is None: lib_dir = Path(sh('git-root'))/"lib"
    nb_export(nb_file, lib_dir)
