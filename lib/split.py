# AUTOGENERATED! DO NOT EDIT! File to edit: ../study-demo/split.ipynb.

# %% auto 0
__all__ = ['nlp', 'spacy_init', 'spacy_split', 'spacy_split_overlap']

# %% ../study-demo/split.ipynb 11
import spacy
from math import ceil

# %% ../study-demo/split.ipynb 12
nlp = None
def spacy_init(model="en_core_web_sm"):
    global nlp
    nlp = spacy.load(model)

# %% ../study-demo/split.ipynb 14
def spacy_split(doc, size=None, n_pieces=1):
    total = len(doc)
    if size:
        n_pieces = ceil(total / size)
    pieces = []
    tokens = 0
    end_piece = 0
    sents = list(doc.sents)
    n_sents = len(sents)
    for i, sent in enumerate(sents):
        tokens += len(sent)
        if tokens > end_piece or n_sents - i <= n_pieces - len(pieces):
            pieces.append([])
            end_piece = total * len(pieces) / n_pieces
        pieces[-1].append(sent)
    return pieces

# %% ../study-demo/split.ipynb 16
def spacy_split_overlap(doc, size=None, n_pieces=1, overlap=0):
    total = len(doc)
    if size:
        n_pieces = ceil(total / size)
    overlap = min(overlap, ceil(total / (n_pieces+1)))
    pieces = []
    tokens = 0
    end_piece = 0
    sents = list(doc.sents)
    n_sents = len(sents)
    overlap_piece = []
    end_piece_1 = 0
    end_piece_2 = 0
    for i, sent in enumerate(sents):
        tokens += len(sent)
        if tokens > end_piece_2 or n_sents - i <= n_pieces - len(pieces):
            pieces.append(overlap_piece)
            overlap_piece = []
            end_piece_1 = (total - overlap) * len(pieces) / n_pieces
            end_piece_2 = end_piece_1 + overlap
        elif tokens > end_piece_1:
            overlap_piece.append(sent)
        pieces[-1].append(sent)
    return pieces
