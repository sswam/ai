[
  {
    "objectID": "posts/setup/setup.html",
    "href": "posts/setup/setup.html",
    "title": "My setup for AI work on my Linux PC",
    "section": "",
    "text": "I am using my home PC, with Debian 12 “bookworm” (testing) and an NVIDIA GPU.\nThe following setup is not recommended unless you know what you’re doing with Linux, and probably not even then.\nI decided not to use conda, virtualenv, or docker. Instead, I installed the necessary Python modules under /usr/local with pip. This way I can use my AI tools directly from the command line and other scripts, like any other tools."
  },
  {
    "objectID": "posts/setup/setup.html#allow-myself-to-install-packages-to-usrlocal",
    "href": "posts/setup/setup.html#allow-myself-to-install-packages-to-usrlocal",
    "title": "My setup for AI work on my Linux PC",
    "section": "Allow myself to install packages to /usr/local",
    "text": "Allow myself to install packages to /usr/local\nIt’s not safe to run pip install -U as root. It will merrily remove files from Debian-packaged Python modules under /usr/lib, and mess up the system. To avoid this, I changed permissions so that my regular user account can write to everything under /usr/local via the staff group. I do the same for /opt because I want to upgrade Rust from my own user ID also:\n\nsudo adduser $USER staff\nsudo chgrp -R staff /usr/local /opt\nsudo chmod -R g+w /usr/local /opt\n\nadduser: The user `sam' is already a member of `staff'.\n\n\nThis is somewhat of a security concern, but if a bad guy gets a local shell it’s pretty much game over anyway. To make it safer, I could have used a different non-root account.\nIn order to upgrade a pip package where the same package was also installed in /usr/lib by dpkg, I need to use pip -I -U packagename. The -I flag tells it to ignore installed packages, i.e. don’t try to remove them. I only do that as needed for individual packages, when a normal upgrade fails.\nThis setup might upset Debian-packaged programs that depend on older versions of the Python libraries that I’ve upgraded. I haven’t noticed any problems like that yet.\nIf you try to downgrade a package, and If multiple versions of a package are accidentally installed under /usr/local/lib/python3.10 at that same time, the sym"
  },
  {
    "objectID": "posts/setup/setup.html#enable-switching-the-system-python-version",
    "href": "posts/setup/setup.html#enable-switching-the-system-python-version",
    "title": "My setup for AI work on my Linux PC",
    "section": "Enable switching the system python version",
    "text": "Enable switching the system python version\nThe default Python version for Debian “testing” at time of writing is Python 3.11, however we don’t have a stable release of pytorch for Python 3.11 yet:\n\npython3.11 -m pip install torchvision\n\nERROR: Could not find a version that satisfies the requirement torchvision (from versions: 0.1.6, 0.1.7, 0.1.8, 0.1.9, 0.2.0, 0.2.1, 0.2.2, 0.2.2.post2, 0.2.2.post3)\nERROR: No matching distribution found for torchvision\n\n\n\n: 1\n\n\nSo let’s enable switching the system Python version back to 3.10, using update-alternatives.\nFirst, note that we can undo this change later, if necessary, as follows:\n\nsudo update-alternatives --remove-all python3\nsudo update-alternatives --remove-all pydoc3\nsudo ln -sf python3.11 /usr/bin/python3\nsudo ln -sf pydoc3.11 /usr/bin/pydoc3\n\nWe can set up alternatives for python3:\n\nsudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 11\nsudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.10 10\nsudo update-alternatives --set python3 /usr/bin/python3.10\n\nupdate-alternatives: using /usr/bin/python3.11 to provide /usr/bin/python3 (python3) in auto mode\nupdate-alternatives: using /usr/bin/python3.10 to provide /usr/bin/python3 (python3) in manual mode\n\n\nand do the same for pydoc3:\n\nsudo update-alternatives --install /usr/bin/pydoc3 pydoc3 /usr/bin/pydoc3.11 11\nsudo update-alternatives --install /usr/bin/pydoc3 pydoc3 /usr/bin/pydoc3.10 10\nsudo update-alternatives --set pydoc3 /usr/bin/pydoc3.10\n\nupdate-alternatives: using /usr/bin/pydoc3.11 to provide /usr/bin/pydoc3 (pydoc3) in auto mode\nupdate-alternatives: using /usr/bin/pydoc3.10 to provide /usr/bin/pydoc3 (pydoc3) in manual mode"
  },
  {
    "objectID": "posts/setup/setup.html#install-rust",
    "href": "posts/setup/setup.html#install-rust",
    "title": "My setup for AI work on my Linux PC",
    "section": "Install Rust",
    "text": "Install Rust\nSome Python modules now depend on Rust to build. I want to install Rust system-wide, in /opt/rust:\n\ncd /tmp\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > install_rust.sh\nsudo RUSTUP_HOME=/opt/rust CARGO_HOME=/opt/rust sh ./install_rust.sh -y --no-modify-path\n\ninfo: downloading installer\ninfo: profile set to 'default'\ninfo: default host triple is x86_64-unknown-linux-gnu\nwarning: Updating existing toolchain, profile choice will be ignored\ninfo: syncing channel updates for 'stable-x86_64-unknown-linux-gnu'\ninfo: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n\n  stable-x86_64-unknown-linux-gnu unchanged - rustc 1.67.1 (d5a82bbd2 2023-02-07)\n\n\nRust is installed now. Great!\n\nTo get started you need Cargo's bin directory (/opt/rust/bin) in your PATH\nenvironment variable. This has not been done automatically.\n\nTo configure your current shell, run:\nsource \"/opt/rust/env\"\n\n\n\n. /opt/rust/env\nrustup default stable\n\ninfo: using existing install for 'stable-x86_64-unknown-linux-gnu'\ninfo: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n\n  stable-x86_64-unknown-linux-gnu unchanged - rustc 1.67.1 (d5a82bbd2 2023-02-07)"
  },
  {
    "objectID": "posts/setup/setup.html#install-packages-for-fastai-and-jupyter",
    "href": "posts/setup/setup.html#install-packages-for-fastai-and-jupyter",
    "title": "My setup for AI work on my Linux PC",
    "section": "Install packages for fastai and jupyter",
    "text": "Install packages for fastai and jupyter\n\npip install -U -qq fastbook jupyter jupyterlab tensorflow\n\nExtra packages for bash and C kernels:\n\npip install -U -qq nbdev bash_kernel jupyter-c-kernel\n\n\npython -m bash_kernel.install\n\nInstalling IPython kernel spec\n\n\n\ninstall_c_kernel\n\nInstalling IPython kernel spec\n/usr/local/bin/install_c_kernel:32: DeprecationWarning: replace is ignored. Installing a kernelspec always replaces an existing installation\n  KernelSpecManager().install_kernel_spec(td, 'c', user=user, replace=True, prefix=prefix)"
  },
  {
    "objectID": "posts/setup/setup.html#untold-difficulties",
    "href": "posts/setup/setup.html#untold-difficulties",
    "title": "My setup for AI work on my Linux PC",
    "section": "Untold difficulties",
    "text": "Untold difficulties\nI haven’t described all the various problems I’ve had to deal with, due to using this approach. There were plenty of problems! I guess I’m learning something from it, anyway. I wish Lambda Stack worked on Debian, not only Ubuntu, it would be a lot easier than this. Maybe I should give it a try on Debian anyway, and see what happens."
  },
  {
    "objectID": "posts/blogging/blogging.html",
    "href": "posts/blogging/blogging.html",
    "title": "Blogging AI with Jupyter and Quarto",
    "section": "",
    "text": "I am starting this blog to record my AI studies, particularly with the fast.ai book and courses.\nIn this first post, I’ll detail why and how I’m setting up this blog."
  },
  {
    "objectID": "posts/blogging/blogging.html#why-write-a-blog",
    "href": "posts/blogging/blogging.html#why-write-a-blog",
    "title": "Blogging AI with Jupyter and Quarto",
    "section": "Why write a blog?",
    "text": "Why write a blog?\nIt’s important for me to record what I’m learning. If I publish these notes as a blog, I can get feedback and possibly help other people too.\nSee also:\n\nThis previous post of mine on dev.to: Why Write a Dev Log?\nRachael Thomas’s post: Why you (yes, you) should blog\nAnother post from Rachael: Advice for Better Blog Posts"
  },
  {
    "objectID": "posts/blogging/blogging.html#why-use-jupyter-and-quarto",
    "href": "posts/blogging/blogging.html#why-use-jupyter-and-quarto",
    "title": "Blogging AI with Jupyter and Quarto",
    "section": "Why use Jupyter and Quarto?",
    "text": "Why use Jupyter and Quarto?\nThe fast.ai team recommends to work in Jupyter and blog using Quarto. Their nbdev2 tool also makes use of Quarto. We can work on a notebooks in Jupyter, then run them through nbdev2 and Quarto to produce software libraries, documentation, apps, blog posts, papers, and even books.\nSee also:\n\nnbdev+Quarto: A new secret weapon for productivity"
  },
  {
    "objectID": "posts/blogging/blogging.html#installing-the-software",
    "href": "posts/blogging/blogging.html#installing-the-software",
    "title": "Blogging AI with Jupyter and Quarto",
    "section": "Installing the software",
    "text": "Installing the software\nI am running the AI tools on my home PC, with Debian GNU/Linux and an NVIDIA GPU. I’ll write more about my setup in another post.\nI downloaded Quarto from their Get Started page, and installed it.\nThis command installs or upgrades the other software we need:\n\npip install -qq -U jupyter fastbook nbdev"
  },
  {
    "objectID": "posts/blogging/blogging.html#setting-up-the-blog",
    "href": "posts/blogging/blogging.html#setting-up-the-blog",
    "title": "Blogging AI with Jupyter and Quarto",
    "section": "Setting up the blog",
    "text": "Setting up the blog\nI already had a git repo called ai in my home directory. The following commands would create it, and don’t do any harm if it’s already there.\n\ncd\nmkdir -p ai\ncd ai\ngit init\n\nReinitialized existing Git repository in /home/sam/ai/.git/\n\n\n\nquarto create-project blog --type website:blog\n\nCreating project at /home/sam/ai/blog:\n  - Created _quarto.yml\n  - Created .gitignore\n  - Created index.qmd\n  - Created posts/welcome/index.qmd\n  - Created posts/post-with-code/index.qmd\n  - Created about.qmd\n  - Created styles.css\n  - Created posts/_metadata.yml\n\n\nI ran nbdev_install_hooks, which prevents unnecessary git merge conflicts, and allows us to resolve conflicts in Jupyter.\n\nnbdev_install_hooks\n\nHooks are installed.\n\n\nSee also:\n\nQuarto - Creating a Blog\nThe Jupyter+git problem is now solved\nGit-Friendly Jupyter"
  },
  {
    "objectID": "posts/blogging/blogging.html#adding-this-post-to-the-blog",
    "href": "posts/blogging/blogging.html#adding-this-post-to-the-blog",
    "title": "Blogging AI with Jupyter and Quarto",
    "section": "Adding this post to the blog",
    "text": "Adding this post to the blog\nI had already started writing this post in a Jupyter Lab notebook blogging.ipynb. Now I needed to put it in the right place, so I made a directory for it:\n\nmkdir -p blog/posts/blogging\n\nI then moved this notebook blogging.ipynb into that new blog/posts/blogging directory, directly in Jupyter Lab. There was no need to close the notebook."
  },
  {
    "objectID": "posts/blogging/blogging.html#previewing-the-blog",
    "href": "posts/blogging/blogging.html#previewing-the-blog",
    "title": "Blogging AI with Jupyter and Quarto",
    "section": "Previewing the blog",
    "text": "Previewing the blog\nWe can preview the blog, by running this in a terminal:\nquarto preview blog\nDon’t run it in a Jupyter cell, because it doesn’t exit and will hang Jupyter!\nI’m using a few extra options that suit my setup:\nquarto preview blog --no-browser --port 4242"
  },
  {
    "objectID": "posts/blogging/blogging.html#finishing-up",
    "href": "posts/blogging/blogging.html#finishing-up",
    "title": "Blogging AI with Jupyter and Quarto",
    "section": "Finishing up",
    "text": "Finishing up\nI removed the example posts, changed the settings, filled in the about page, added links to my socials, and added a profile picture.\nI followed the Quarto doc to enable comments using Hypothesis, and an RSS feed.\nSee also:\n\nQuarto - HTML Basics - Commenting\nQuarto - Creating a Blog - RSS Feed"
  },
  {
    "objectID": "posts/blogging/blogging.html#committing-to-git",
    "href": "posts/blogging/blogging.html#committing-to-git",
    "title": "Blogging AI with Jupyter and Quarto",
    "section": "Committing to git",
    "text": "Committing to git\nThe Quarto doc says “you should always fully quarto render your site before deploying it”, so let’s do it, and commit to git:\n\ncd ~/ai\nquarto render blog\ngit add blog\ngit commit -m 'update blog'\ngit push\ngit push opal\ngit push pi\n\nI pushed to github, and my two servers opal and pi.\nSee also:\n\nQuarto - Websites"
  },
  {
    "objectID": "posts/blogging/blogging.html#publishing-the-blog",
    "href": "posts/blogging/blogging.html#publishing-the-blog",
    "title": "Blogging AI with Jupyter and Quarto",
    "section": "Publishing the blog",
    "text": "Publishing the blog\nI used a symlink to put the rendered blog into my website at sam.ucm.dev/blog:\nln -s ~/ai/blog/_site ~/www/sam.ucm.dev/blog\nSee also:\n\nQuarto - Publishing"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "I’m Sam Watkins, from Melbourne, Australia.\nI’m recording my AI studies in this blog, specifically with the fast.ai book and courses.\nIt’s important for me to record what I’m learning. If I publish these notes as a blog, I can get feedback and possibly help other people too."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Sam’s AI Blog",
    "section": "",
    "text": "My setup for AI work on my Linux PC\n\n\n\n\n\n\n\nfastai\n\n\nsetup\n\n\n\n\n\n\n\n\n\n\n\nFeb 8, 2023\n\n\nSam Watkins\n\n\n\n\n\n\n\n\nBlogging AI with Jupyter and Quarto\n\n\n\n\n\n\n\nfastai\n\n\nblogging\n\n\nJupyter\n\n\nQuarto\n\n\n\n\n\n\n\n\n\n\n\nFeb 8, 2023\n\n\nSam Watkins\n\n\n\n\n\n\nNo matching items"
  }
]