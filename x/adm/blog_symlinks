#!/usr/bin/env python3

# chdir to ~/ai/blog

import os
from os.path import basename, islink
import re
from glob import glob
import jq
from pathlib import Path
import argparse
import contextlib

# move to lib

@contextlib.contextmanager
def cd(path):
    old_dir = os.getcwd()
    os.chdir(path)
    try:
        yield
    finally:
        os.chdir(old_dir)

def quarto_post_date(post_file):
	with open(post_file) as f:
		text = f.read()
	metadata = jq.compile('.cells[] | select(.cell_type == "raw") | .source | join("")').input(text=text).first()
	match = re.search(r'^date: "(.*?)"$', metadata, re.MULTILINE)
	if not match:
		raise Exception('no date found in post metadata for ' + post_file)
	date = match.group(1)
	return date

def blog_update_symlinks_2(number_width=3, dry_run=False, verbose=False, debug=False):
	# get list of blog symlinks
	blog_links = sorted(filter(islink, glob('*.ipynb')))

	# get list of blog posts under posts/foo/foo.ipynb
	posts = glob('posts/*/*.ipynb')

	# get link targets for each blog symlink
	link_targets = [os.readlink(link) for link in blog_links]

	# get list of posts which don't have symlinks yet
	new_posts = [post for post in posts if post not in link_targets]

	# sort posts by date
	new_posts_by_date = sorted(new_posts, key=quarto_post_date)

	if debug:
		print(blog_links)
		print(posts)
		print(link_targets)
		print(new_posts)
		print(new_posts_by_date)

	# get the number of the last post
	n_posts = int(re.match(r'^\d+', basename(blog_links[-1])).group(0)) if blog_links else 0
	if debug:
		print(n_posts)

	# create a numbered symlink for each post which doesn't have one yet
	for post in new_posts_by_date:
		n_posts += 1
		post_number = str(n_posts).zfill(number_width)
		link_name = f'{post_number}_{os.path.basename(post)}'
		if not dry_run:
			os.symlink(post, link_name)
		if verbose:
			print(f'created symlink {link_name} -> {post}')

def blog_update_symlinks(blog_dir, **kwargs):
	with cd(blog_dir):
		return blog_update_symlinks_2(**kwargs)

def main():
	parser = argparse.ArgumentParser(description='Update blog symlinks')
	parser.add_argument('blog_dir', type=str, help='blog directory')
	parser.add_argument('--number-width', type=int, default=3, help='number width')
	parser.add_argument('--dry-run', action='store_true', help='dry run')
	parser.add_argument('--verbose', action='store_true', help='verbose')
	parser.add_argument('--debug', action='store_true', help='debug')
	args = parser.parse_args()
	blog_update_symlinks(args.blog_dir, number_width=args.number_width, dry_run=args.dry_run, verbose=args.verbose, debug=args.debug)

if __name__ == '__main__':
	main()

