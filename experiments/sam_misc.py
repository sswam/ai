# AUTOGENERATED! DO NOT EDIT! File to edit: sam_misc.ipynb.

# %% auto 0
__all__ = ['p', 'powerset', 'join_a_foo_and_a_bar', 'seq_diff', 'confirm_delete', 'setup_logging']

# %% sam_misc.ipynb 1
import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '1'

# %% sam_misc.ipynb 2
from itertools import chain, combinations
import inflect
from fastcore.foundation import L
import ipywidgets as widgets
import logging

# %% sam_misc.ipynb 3
def powerset(iterable):
    "powerset([1,2,3]) --> () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)"
    s = list(iterable)
    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))

# %% sam_misc.ipynb 4
p = inflect.engine()

# %% sam_misc.ipynb 5
def join_a_foo_and_a_bar(comb):
    return " and ".join(p.a(x) for x in comb)

# %% sam_misc.ipynb 7
def seq_diff(s1, s2):
    return L(filter(lambda x: x not in s2, s1))

# %% sam_misc.ipynb 9
def confirm_delete(del_path):
    button = widgets.Button(description=f"Move data to trash: {del_path}?", layout=widgets.Layout(width='20em'))
    # button.on_click(lambda b: shutil.rmtree(del_path, ignore_errors=True))
    button.on_click(lambda b: send2trash(del_path))
    display(button)

# %% sam_misc.ipynb 10
def setup_logging(quiet=False, debug=False):
    if debug:
        logging.basicConfig(level=logging.DEBUG, format="%(asctime)s %(levelname)s %(message)s")
    elif quiet:
        logging.basicConfig(level=logging.ERROR, format="%(message)s")
    else:
        logging.basicConfig(level=logging.INFO, format="%(message)s")
