#!/usr/bin/env python3

# split_text: split a text file into pieces of similar length

# WIP / incomplete

import sys

def split_text(text, size=None, n=None):
	pass
	return text



def setup_logging(log_level=logging.WARNING, log_file=None):
	""" Set up logging. """
	fmt = "%(message)s"
	if log_level == logging.DEBUG:
		fmt = "%(asctime)s %(levelname)s %(name)s %(message)s"

	# if a log_file was specified, use it
	log_file = log_file or os.environ.get('SPLIT_TEXT_LOG_FILE')
	logging.basicConfig(level=log_level, format=fmt, filename=log_file)

def add_logging_options(parser):
	""" Add logging options to an argument parser. """
	logging_group = parser.add_argument_group('Logging options')
	logging_group.set_defaults(log_level=logging.WARNING)
	logging_group.add_argument('-d', '--debug', dest='log_level', action='store_const', const=logging.DEBUG, help="show debug messages")
	logging_group.add_argument('-v', '--verbose', dest='log_level', action='store_const', const=logging.INFO, help="show verbose messages")
	logging_group.add_argument('-q', '--quiet', dest='log_level', action='store_const', const=logging.ERROR, help="show only errors")
	logging_group.add_argument('-Q', '--silent', dest='log_level', action='store_const', const=logging.CRITICAL, help="show nothing")
	logging_group.add_argument('--log', default=None, help="log file")

def parse_args():
	""" Parse command-line arguments. """
	parser = argparse.ArgumentParser(description='split_text: split a text file into pieces of similar length')

	model_group = parser.add_argument_group('Model options')
	model_group.add_argument('-s', '--size', type=int, default=None, help="maximum size of each piece")
	model_group.add_argument('-n', '--pieces', type=int, default=None, help="number of pieces to split the text into")

	add_logging_options(parser)

	args = parser.parse_args()

	setup_logging(log_level=args.log_level, log_file=args.log)

	logger.debug("args: %s", args)

	return args

def main():
	""" The main function, called when this module is run as a script. """
	args = parse_args()
	text = sys.stdin.read()
	pieces = split_text(text, size=args.size, n=args.pieces)
	response_message = chatgpt(input_messages, fake=args.fake, model=args.model)
	output_lines = messages_to_lines([response_message])
	sys.stdout.writelines(output_lines)


if __name__ == "__main__":
	try:
		main()
	except Exception as e:
		if logger.getEffectiveLevel() == logging.DEBUG:
			raise
		logger.error("error: %s", e)
		sys.exit(1)
